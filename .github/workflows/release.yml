name: Release

on:
  push:
    tags: ['v*', 'plugin-*-v*'] # v1.2.3 or plugin-<name>-v1.2.3
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build artifacts
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          # Linux
          - os: linux
            goos: linux
            goarch: amd64
          - os: linux
            goos: linux
            goarch: arm64
          # macOS
          - os: darwin
            goos: darwin
            goarch: amd64
          - os: darwin
            goos: darwin
            goarch: arm64
          # Windows
          - os: windows
            goos: windows
            goarch: amd64
          - os: windows
            goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Set up protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '27.x'

      - name: Resolve version from tag
        id: v
        shell: bash
        run: |
          TAG="${{ github.ref_name }}"
          if [[ "$TAG" =~ ^plugin-(.*)-v(.*)$ ]]; then
            echo "kind=plugin" >> "$GITHUB_OUTPUT"
            echo "plugin_name=plugin-${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
            echo "version=${BASH_REMATCH[2]}" >> "$GITHUB_OUTPUT"
          elif [[ "$TAG" =~ ^v(.*)$ ]]; then
            echo "kind=full" >> "$GITHUB_OUTPUT"
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "Unexpected tag format: $TAG"
            exit 1
          fi

      - name: Install deps
        run: make deps

      - name: Generate protobuf
        run: make proto

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          VERSION="${{ steps.v.outputs.version }}"
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          LDFLAGS="-s -w -X github.com/williamokano/hashicorp-plugin-example/internal/version.CLIVersion=${VERSION} \
                   -X github.com/williamokano/hashicorp-plugin-example/internal/version.CLIBuildTime=${BUILD_TIME} \
                   -X main.Version=${VERSION} \
                   -X main.BuildTime=${BUILD_TIME}"

          mkdir -p dist

          if [[ "${{ steps.v.outputs.kind }}" == "full" ]]; then
            BIN="plugin-cli"
            [[ "${{ matrix.goos }}" == "windows" ]] && BIN="${BIN}.exe"
            go build -trimpath -ldflags "${LDFLAGS}" -o "${BIN}" cmd/cli/main.go

            if [[ "${{ matrix.goos }}" == "windows" ]]; then
              PKG="plugin-cli_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.zip"
              zip -q "dist/${PKG}" "${BIN}"
            else
              PKG="plugin-cli_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.tar.gz"
              tar -czf "dist/${PKG}" "${BIN}"
            fi
            echo "Created package: dist/${PKG}"
            ls -la "dist/${PKG}"
            sha256sum "dist/${PKG}" > "dist/${PKG}.sha256"

            for PLUGIN_DIR in plugins/*/; do
              PLG=$(basename "${PLUGIN_DIR}")
              BIN="plugin-${PLG}"
              [[ "${{ matrix.goos }}" == "windows" ]] && BIN="${BIN}.exe"
              go build -trimpath -ldflags "${LDFLAGS}" -o "${BIN}" "${PLUGIN_DIR}/main.go"

              if [[ "${{ matrix.goos }}" == "windows" ]]; then
                PKG="plugin-${PLG}_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.zip"
                zip -q "dist/${PKG}" "${BIN}"
              else
                PKG="plugin-${PLG}_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.tar.gz"
                tar -czf "dist/${PKG}" "${BIN}"
              fi
              echo "Created plugin package: dist/${PKG}"
              ls -la "dist/${PKG}"
              sha256sum "dist/${PKG}" > "dist/${PKG}.sha256"
            done

          else
            PN="${{ steps.v.outputs.plugin_name }}"
            PLG="${PN#plugin-}"
            BIN="${PN}"
            [[ "${{ matrix.goos }}" == "windows" ]] && BIN="${BIN}.exe"
            go build -trimpath -ldflags "${LDFLAGS}" -o "${BIN}" "plugins/${PLG}/main.go"

            if [[ "${{ matrix.goos }}" == "windows" ]]; then
              PKG="${PN}_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.zip"
              zip -q "dist/${PKG}" "${BIN}"
            else
              PKG="${PN}_${VERSION}_${{ matrix.os }}_${{ matrix.goarch }}.tar.gz"
              tar -czf "dist/${PKG}" "${BIN}"
            fi
            echo "Created single plugin package: dist/${PKG}"
            ls -la "dist/${PKG}"
            sha256sum "dist/${PKG}" > "dist/${PKG}.sha256"
          fi

      - name: Debug - List all built files
        shell: bash
        run: |
          echo "=== Debug: Contents of dist directory ==="
          ls -la dist/
          echo "=== Debug: File types ==="
          file dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error
          retention-days: 14

  release:
    name: Publish GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Gather files & checksums
        id: collect
        shell: bash
        run: |
          echo "=== Debug: All artifacts ==="
          find artifacts -type f | sort
          echo "=== Debug: tar.gz files ==="
          find artifacts -type f -name '*.tar.gz' | sort
          echo "=== Debug: zip files ==="
          find artifacts -type f -name '*.zip' | sort
          echo "=== Debug: sha256 files ==="
          find artifacts -type f -name '*.sha256' | sort
          
          mkdir -p release
          find artifacts -type f -name '*.tar.gz' -exec cp {} release/ \;
          find artifacts -type f -name '*.zip' -exec cp {} release/ \;
          find artifacts -type f -name '*.sha256' -exec cp {} release/ \;
          (cd release && cat *.sha256 > checksums.txt)
          
          echo "=== Debug: Files in release directory ==="
          ls -la release

      - name: Generate release notes
        run: |
          echo "# Release ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "Includes prebuilt binaries for Linux, macOS, and Windows." >> release_notes.md
          echo "Windows = .zip, Linux/macOS = .tar.gz. Checksums in \`checksums.txt\`." >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          files: release/*
          draft: false
          prerelease: false
