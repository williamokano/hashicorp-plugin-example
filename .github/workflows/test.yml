name: Test

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/test.yml'
      - 'Makefile'
  push:
    branches: [ main, master, develop ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/test.yml'
      - 'Makefile'

env:
  GO_VERSION: '1.24.6'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make deps

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate protobuf files
        run: make proto

      - name: Run tests
        run: make test

      - name: Run tests with race detector
        run: make test-race

      - name: Generate coverage report
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  test-matrix:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.23', '1.24', '1.24.6']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Install protoc (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Install protoc (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc

      - name: Install Go dependencies
        run: go mod download

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf files
        run: |
          protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pkg/protocol/plugin.proto

      - name: Run tests
        run: go test ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make deps

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate protobuf files
        run: make proto

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make deps

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate protobuf files
        run: make proto

      - name: Build CLI
        run: make build-cli

      - name: Build plugins
        run: make build-plugins

      - name: Test plugin execution
        run: |
          mkdir -p plugins
          cp bin/plugin-* plugins/
          chmod +x plugins/plugin-*
          ./bin/plugin-cli plugin list
          ./bin/plugin-cli version

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: binaries
      #     path: bin/