name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.24', '1.25']
        arch: [amd64, arm64]
        exclude:
          # GitHub Actions doesn't support all architecture combinations
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: amd64
            go: '1.24'  # Keep only one mac/amd64 combo to save CI time
          - os: windows-latest
            arch: arm64  # Windows ARM64 runners not available
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          architecture: ${{ matrix.arch }}

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: make test
        env:
          GOARCH: ${{ matrix.arch }}

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out ./...
        env:
          GOARCH: ${{ matrix.arch }}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.25' && matrix.arch == 'amd64'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.25' && matrix.arch == 'amd64'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          # Uncomment to enforce minimum coverage
          # if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          #   echo "Coverage is below 50%"
          #   exit 1
          # fi

  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.25']  # Only test build on latest Go version
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Get dependencies
        run: go mod download

      - name: Build CLI and plugins
        run: make build

      - name: Test plugin discovery
        run: |
          make install-local
          ./bin/plugin-cli plugin list

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install tools
        run: |
          # Install golangci-lint v2.4.0 (supports Go 1.24+)
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
          # Install gosec
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.8
          # Add GOPATH/bin to PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run lint checks
        run: make lint

      - name: Run go vet
        run: make vet

      - name: Check formatting
        run: make fmt-check

      - name: Run security scan
        run: make security

      - name: Check go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]; then
            echo "go mod tidy would make changes - run 'go mod tidy' and commit the changes"
            exit 1
          fi

      - name: Run full quality pipeline
        run: make quality

  security:
    name: Security Scan (with SARIF)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.22.8

      - name: Run gosec with SARIF output
        run: |
          gosec -fmt sarif -out gosec-results.sarif -confidence medium ./... || true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
      
      - name: Run vulnerability check
        run: make vulncheck

  complexity:
    name: Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Check cyclomatic complexity
        run: |
          go install github.com/fzipp/gocyclo/cmd/gocyclo@v0.6.0
          # Report but don't fail on high complexity
          gocyclo -over 15 . || true

      - name: Check ineffective assignments
        run: |
          go install github.com/gordonklaus/ineffassign@v0.1.0
          ineffassign ./...